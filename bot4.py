dots = [(263, 581), (260, 581), (261, 581), (262, 581), (264, 581), (265, 581), (266, 581)]
dots2 = [[261, 474], [263, 474], [265, 474], [267, 474], [253, 476], [255, 476], [261, 476], [268, 476], [250, 477], [257, 477], [259, 477], [268, 478], [250, 479], [268, 480], [248, 481], [250, 481], [245, 482], [268, 482], [242, 483], [239, 484], [241, 484], [268, 484], [239, 486], [269, 486], [239, 488], [270, 488], [272, 489], [238, 490], [272, 491], [238, 492], [273, 493], [238, 494], [273, 495], [238, 496], [273, 497], [238, 498], [274, 499], [238, 500], [274, 501], [237, 502], [275, 503], [237, 504], [218, 505], [220, 505], [275, 505], [222, 506], [224, 506], [237, 506], [216, 507], [226, 507], [228, 507], [230, 507], [232, 507], [234, 507], [275, 507], [237, 508], [239, 508], [215, 509], [276, 509], [214, 511], [277, 511], [213, 513], [277, 513], [212, 515], [278, 515], [211, 517], [278, 517], [210, 519], [279, 519], [209, 521], [280, 521], [208, 523], [281, 523], [207, 525], [281, 525], [206, 527], [282, 527], [205, 529], [282, 529], [205, 531], [282, 531], [204, 533], [282, 533], [203, 535], [283, 535], [202, 537], [283, 537], [201, 539], [283, 539], [199, 541], [284, 541], [198, 543], [284, 543], [197, 545], [284, 545], [197, 547], [285, 547], [198, 549], [284, 549], [199, 551], [284, 551], [200, 553], [285, 553], [200, 555], [285, 555], [201, 557], [285, 557], [201, 559], [286, 559], [202, 561], [285, 561], [203, 563], [285, 563], [204, 565], [285, 565], [205, 567], [285, 567], [206, 569], [285, 569], [207, 571], [285, 571], [207, 573], [285, 573], [208, 575], [286, 575], [208, 577], [286, 577], [209, 579], [286, 579], [209, 581], [260, 581], [262, 581], [264, 581], [266, 581], [268, 581], [270, 581], [272, 581], [287, 581], [242, 582], [244, 582], [246, 582], [248, 582], [250, 582], [252, 582], [254, 582], [256, 582], [258, 582], [274, 582], [276, 582], [278, 582], [280, 582], [282, 582], [284, 582], [209, 583], [213, 583], [215, 583], [217, 583], [219, 583], [221, 583], [223, 583], [230, 583], [232, 583], [234, 583], [236, 583], [238, 583], [240, 583], [210, 584], [225, 584], [227, 584], [209, 585]]
def aproxSex(road: list, hSide: int):
    tmp = []
    tmp.append(road[0])
    road.pop(0)
    target = tmp[0]

    i = 0
    while True:
        flag = True

        upLeft = (target[0] - hSide, target[1] + hSide) 
        downRight = (target[0] + hSide, target[1] - hSide) 

        j = 0
        while j < len(road):
            if upLeft[0] <= road[j][0] <= downRight[0] and upLeft[1] >= road[j][1] >= downRight[1]: 
                tmp.append(road[j])
                target = road[j]
                road.pop(j)
                j -= 1
                flag = False
                break
            j += 1
        if flag:
            break
    print(tmp)

    ################     /(.) (.)\
    # second_peace #    /__)   (  \___
    ################      (     )
    ################      
    ################      
    target = tmp[0]  
    tmp2 = []      

    i = 0
    while True:
        flag = True

        upLeft = (target[0] - hSide, target[1] + hSide) 
        downRight = (target[0] + hSide, target[1] - hSide) 

        j = 0
        while j < len(road):
            if upLeft[0] <= road[j][0] <= downRight[0] and upLeft[1] >= road[j][1] >= downRight[1]: 
                tmp2.append(road[j])
                target = road[j]
                road.pop(j)
                j -= 1
                flag = False
                break
            j += 1
        if flag:
            break
    print(tmp)

    tmp2 = list(reversed(tmp2))
    tmp2.extend(tmp)
    print(tmp2)
aproxSex(dots2, 2)